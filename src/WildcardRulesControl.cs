// File: WildcardRulesControl.cs
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using MinimalFirewall.TypedObjects;

namespace MinimalFirewall
{
    public partial class WildcardRulesControl : UserControl
    {
        private WildcardRuleService _wildcardRuleService = null!;
        private BackgroundFirewallTaskService _backgroundTaskService = null!;
        private AppSettings _appSettings = null!;
        private BindingSource _bindingSource;

        public WildcardRulesControl()
        {
            InitializeComponent();
            this.DoubleBuffered = true;
        }

        public void Initialize(WildcardRuleService wildcardRuleService, BackgroundFirewallTaskService backgroundTaskService, AppSettings appSettings)
        {
            _wildcardRuleService = wildcardRuleService;
            _backgroundTaskService = backgroundTaskService;
            _appSettings = appSettings;

            wildcardDataGridView.AutoGenerateColumns = false;
            _bindingSource = new BindingSource();
            wildcardDataGridView.DataSource = _bindingSource;
        }

        public void LoadRules()
        {
            if (_wildcardRuleService != null)
            {
                _bindingSource.DataSource = _wildcardRuleService.GetRules();
                _bindingSource.ResetBindings(false);
                wildcardDataGridView.Refresh();
            }
        }

        public void ClearRules()
        {
            _bindingSource.DataSource = null;
        }

        private void addRuleButton_Click(object sender, EventArgs e)
        {
            using var form = new WildcardCreatorForm(_wildcardRuleService, _appSettings);
            if (form.ShowDialog(this.FindForm()) == DialogResult.OK)
            {
                var newRule = form.NewRule;
                _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.AddWildcardRule, newRule));
                LoadRules();
            }
        }

        private void editRuleButton_Click(object sender, EventArgs e)
        {
            if (wildcardDataGridView.SelectedRows.Count != 1 || wildcardDataGridView.SelectedRows[0].DataBoundItem is not WildcardRule selectedRule)
            {
                MessageBox.Show("Please select a single rule to edit.", "Edit Rule", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            using var form = new WildcardCreatorForm(_wildcardRuleService, _appSettings, selectedRule);
            if (form.ShowDialog(this.FindForm()) == DialogResult.OK)
            {
                var updatedRule = form.NewRule;
                var payload = new UpdateWildcardRulePayload { OldRule = selectedRule, NewRule = updatedRule };
                _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.UpdateWildcardRule, payload));
                LoadRules();
            }
        }

        private void deleteRuleButton_Click(object sender, EventArgs e)
        {
            if (wildcardDataGridView.SelectedRows.Count == 0)
            {
                return;
            }

            var result = MessageBox.Show($"Are you sure you want to delete {wildcardDataGridView.SelectedRows.Count} rule definition(s)? This will also remove any firewall rules created by them.", "Confirm Deletion", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if (result == DialogResult.Yes)
            {
                foreach (DataGridViewRow row in wildcardDataGridView.SelectedRows)
                {
                    if (row.DataBoundItem is WildcardRule ruleToDelete)
                    {
                        var payload = new DeleteWildcardRulePayload { Wildcard = ruleToDelete };
                        _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.RemoveWildcardRule, payload));
                    }
                }
                LoadRules();
            }
        }

        private void deleteDefinitionOnlyToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (wildcardDataGridView.SelectedRows.Count == 0)
            {
                return;
            }

            var result = MessageBox.Show($"Are you sure you want to delete the selected {wildcardDataGridView.SelectedRows.Count} wildcard definition(s)? Any existing rules already generated by them will NOT be deleted.", "Confirm Action", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if (result == DialogResult.Yes)
            {
                foreach (DataGridViewRow row in wildcardDataGridView.SelectedRows)
                {
                    if (row.DataBoundItem is WildcardRule ruleToDelete)
                    {
                        var payload = new DeleteWildcardRulePayload { Wildcard = ruleToDelete };
                        _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.RemoveWildcardDefinitionOnly, payload));
                    }
                }
                LoadRules();
            }
        }

        private void deleteAllGeneratedRulesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (wildcardDataGridView.SelectedRows.Count == 0)
            {
                return;
            }

            var result = MessageBox.Show($"Are you sure you want to delete all individual firewall rules generated by the selected {wildcardDataGridView.SelectedRows.Count} wildcard definition(s)? The definitions themselves will not be deleted.", "Confirm Action", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if (result == DialogResult.Yes)
            {
                foreach (DataGridViewRow row in wildcardDataGridView.SelectedRows)
                {
                    if (row.DataBoundItem is WildcardRule rule)
                    {
                        var payload = new DeleteWildcardRulePayload { Wildcard = rule };
                        _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.DeleteWildcardRules, payload));
                    }
                }
                MessageBox.Show("The generated rules for the selected definitions have been queued for deletion.", "Task Queued", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void wildcardDataGridView_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            if (e.RowIndex < 0 || e.RowIndex >= _bindingSource.Count) return;

            if (_bindingSource.List[e.RowIndex] is WildcardRule rule)
            {
                var column = wildcardDataGridView.Columns[e.ColumnIndex];
                if (column.DataPropertyName == "Protocol")
                {
                    e.Value = rule.Protocol switch
                    {
                        6 => "TCP",
                        17 => "UDP",
                        _ => "Any",
                    };
                    e.FormattingApplied = true;
                }
            }
        }
    }
}